#!/usr/bin/env bash

function parseOpcode()
{
	case "$1" in
		major | maj | M | x)
			echo "major"
			;;
		minor | min | m | y)
			echo "minor"
			;;
		patch | p | z)
			echo "patch"
			;;
		pre)
			echo "pre"
			;;
		*)
			exit 1
			;;
	esac
}

# Begin code
OPCODE_DEFAULT=minor
ARG_ARRAY=()
for ARG in "$@"; do
	case "$ARG" in
		--prerelease | --pre)
			MODE="pre"
			;;
		--release)
			MODE="release"
			;;
		*)
			ARG_ARRAY+=("$ARG")
			;;
	esac
done
ARG_0="${ARG_ARRAY[0]}"
ARG_1="${ARG_ARRAY[1]}"
ARG_2="${ARG_ARRAY[2]}"

case ${#ARG_ARRAY[@]} in
	0)
		OPCODE=$OPCODE_DEFAULT
		;;
	1)
		OPCODE=$(parseOpcode "$ARG_0")
		if [ -z "$OPCODE" ]
		then
			OPCODE="$OPCODE_DEFAULT"
			ID="$ARG_0"
		fi
		;;
	2)
		ID="$ARG_0"
		OPCODE=$(parseOpcode "$ARG_1")
		;;
esac
# Compute prefix
if [ -z "$ID" ]
then
	TAG_PREFIX=""
else
	TAG_PREFIX="$ID/"
fi
# Read current version
VERSION_RAW=$(git tag --list "${TAG_PREFIX}v*" --sort=-v:refname | head -n 1)
VERSION=${VERSION_RAW##*/}
if [ -z "$VERSION" ]
then
	case "$OPCODE" in
		pre)
			VERSION=v0.0.1
			;;
		*)
			VERSION=v0.0.0
			;;
	esac
fi
# Parse
REGEX='v\([[:digit:]]\+.[[:digit:]]\+.[[:digit:]]\+\)\(-pre.\([[:digit:]]\+\)\)\?'
PREFIX=$(echo $VERSION | sed "s/$REGEX/\1/g")
PREFIX=${PREFIX#v}
PRE=$(echo $VERSION | sed "s/$REGEX/\3/g")
DIGITS=(${PREFIX//./ })
MAJOR=${DIGITS[0]}
MINOR=${DIGITS[1]}
PATCH=${DIGITS[2]}
# Handle suffix
case "$MODE" in
	release)
		PRE=0
		OPCODE="noop"
		;;
esac
# Increment
case "$OPCODE" in
	major)
		MAJOR=$((MAJOR+1))
		MINOR=0
		PATCH=0
		PRE=0
		;;
	minor)
		MINOR=$((MINOR+1))
		PATCH=0
		PRE=0
		;;
	patch)
		PATCH=$((PATCH+1))
		PRE=0
		;;
	pre)
		if [ -z "$PRE" ]; then
			echo "You are not in a prerelease state. Run 'git-bump <opcode> --prerelease' first.";
			exit 1
		fi
		PRE=$((PRE+1))
		;;
	noop)
		;;
	*)
		echo "Usage:"
		echo "	git bump [<prefix>] [major | minor | patch | pre] [--prelease | --release]"
		exit 1
		;;
esac
case "$MODE" in
	pre)
		PRE=1
		;;
esac

# Compute version string
TAG="${TAG_PREFIX}v$MAJOR.$MINOR.$PATCH"
if [ "$PRE" -gt 0 ]
then
	TAG="$TAG-pre.$PRE"
fi
# Execute and print
eval "git tag $TAG"
if [ -z "$VERSION_RAW" ]
then
	printf "Version initialized to ${GREEN}$TAG${CLEAR}!\n"
else
	printf "Version bumped from ${YELLOW}$VERSION_RAW${CLEAR} to ${GREEN}$TAG${CLEAR}!\n"
fi
